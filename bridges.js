// Generated by CoffeeScript 1.9.2
var BoardGeometryHelper, BridgeDraw, BridgesApp, ConnectionHelper, PointsList;

window.onload = function() {
  var base;
  base = new Image();
  base.onload = (function(_this) {
    return function() {
      _this.bridges = new BridgesApp(base);
      return console.log('base.png Image.onload() called');
    };
  })(this);
  return base.src = 'base.png';
};

this.mousedown = function(e) {
  var dx, dy, px, py, x, y;
  this.canvas = document.getElementById('bridges-canvas');
  dx = this.canvas.offsetLeft;
  dy = this.canvas.offsetTop;
  px = e.pageX;
  py = e.pageY;
  x = px - dx;
  y = py - dy;
  console.log("[@mousedown] click at " + x + ", " + y);
  return this.bridges.handleClick(x, y);
};

BridgesApp = (function() {
  function BridgesApp(base) {
    console.log('BridgesApp constructor called');
    this.canvas = document.getElementById("bridges-canvas");
    this.context = this.canvas.getContext("2d");
    this.context.drawImage(base, 0, 0);
    this.boardHelper = new BoardGeometryHelper;
    this.points = new PointsList;
    this.connect = new ConnectionHelper(this.boardHelper);
    this.bridgeDraw = new BridgeDraw(this.context);
  }

  BridgesApp.prototype.handleClick = function(xx, yy) {
    var ab;
    console.log("BridgesApp.handleClick(" + xx + ", " + yy + ")");
    ab = this.boardHelper.getAB(xx, yy);
    if (ab[0] >= 0) {
      console.log("(" + xx + ", " + yy + ") --> (" + ab[0] + ", " + ab[1] + ")");
      return this.bridgeDraw.drawBridge('green', ab[0], ab[1]);
    }
  };

  return BridgesApp;

})();

PointsList = (function() {
  function PointsList() {
    var a, b, j, k, l;
    this.list = [];
    this.flatlist = [];
    for (b = j = 1; j <= 15; b = ++j) {
      if (b % 2 === 1) {
        for (a = k = 1; k <= 15; a = k += 2) {
          this.list.push([a, b]);
          this.flatlist.push(a * 100 + b);
        }
      } else {
        for (a = l = 2; l <= 14; a = l += 2) {
          this.list.push([a, b]);
          this.flatlist.push(a * 100 + b);
        }
      }
    }
  }

  PointsList.prototype.remove = function(point) {
    var i;
    i = this.flatlist.indexOf(100 * point[0] + point[1]);
    if (i >= 0) {
      this.list = this.list.slice(0, +(i - 1) + 1 || 9e9).concat(this.list.slice(i + 1));
      return this.flatlist = this.flatlist.slice(0, +(i - 1) + 1 || 9e9).concat(this.flatlist.slice(i + 1));
    }
  };

  return PointsList;

})();

ConnectionHelper = (function() {
  function ConnectionHelper(boardHelper) {
    this.boardHelper = boardHelper;
    this.vt = [[0, -2], [-1, -1], [1, -1], [-1, 1], [1, 1], [0, 2]];
    this.hz = [[-1, -1], [1, -1], [-2, 0], [2, 0], [-1, 1], [1, 1]];
  }

  ConnectionHelper.prototype.findConnectors = function(color, a, b) {
    var aa, bb, cnxx, d, deltas, dir, j, len;
    cnxx = [];
    dir = this.boardHelper.findVH(color, a, b);
    if (dir === 'vert') {
      deltas = this.vt;
    } else {
      deltas = this.hz;
    }
    for (j = 0, len = deltas.length; j < len; j++) {
      d = deltas[j];
      aa = a + d[0];
      bb = b + d[1];
      if (aa >= 1 && aa <= 15 && bb >= 1 && bb <= 15) {
        cnxx.push([aa, bb]);
      }
    }
    return cnxx;
  };

  return ConnectionHelper;

})();

BridgeDraw = (function() {
  function BridgeDraw(canvasContext) {
    this.context = canvasContext;
  }

  BridgeDraw.prototype.drawBridge = function(color, a, b) {
    return console.log("call BridegDraw.drawBridge( " + color + ", " + a + ", " + b + ")");
  };

  return BridgeDraw;

})();

BoardGeometryHelper = (function() {
  function BoardGeometryHelper() {}

  BoardGeometryHelper.prototype.getAB = function(x, y) {
    var a, b;
    a = Math.floor((x - 18) / 25);
    b = Math.floor((y - 18) / 25);
    if ((a + b) % 2 !== 0 || a < 1 || a > 15 || b < 1 || b > 15) {
      return [-1, -1];
    } else {
      return [a, b];
    }
  };

  BoardGeometryHelper.prototype.getXY = function(a, b) {
    var x, y;
    x = 30 + 25 * a;
    y = 30 + 25 * b;
    return [x, y];
  };

  BoardGeometryHelper.prototype.findVH = function(color, a, b) {
    if (color === 'green') {
      if (a % 2 === 1) {
        return 'vert';
      } else {
        return 'horz';
      }
    } else {
      if (a % 2 === 1) {
        return 'horz';
      } else {
        return 'vert';
      }
    }
  };

  return BoardGeometryHelper;

})();
